int DBTraceAPI::MapCount(ptime timeBegin,ptime timeEnd,vector<DBMapData>&MapData){
    ptime tick,now;
    time_duration diff;

    DB.useDB(database);
    table=BASE_TABLE_MAPMARK;
    value="MapMark";

    string_table ret_mark=DB.selectItem(table,value);
    if(ret_mark.size()==0){
        return DB_RET_NULL;
    }

    tick=microsec_clock::local_time();
    vector<DBTrace> trace;
    if(DBSearchTimeTrace(timeBegin,timeEnd,trace)!=DB_RET_OK){
        return DB_RET_SEARCH_ERROR;
    }
    now=microsec_clock::local_time();
    diff=now-tick;	
	cout<<"use "<<diff.total_milliseconds()<<" ms"<<endl;

    tick=microsec_clock::local_time();
    vector<vector<int>> PerData;
    for(auto &v:trace){
        vector<int> tempPer;
        if(PerData.empty()){
            tempPer.push_back(v.PersonID);
            tempPer.push_back(v.PersonModule);
            PerData.push_back(tempPer);
        }else{
            bool flag=false;
            for(auto &p:PerData){
                if(v.PersonID==p[0]&&v.PersonModule==p[1]){
                    flag=true;
                    break;
                }
            }
            if(flag==false){
                tempPer.push_back(v.PersonID);
                tempPer.push_back(v.PersonModule);
                PerData.push_back(tempPer);
            }
        }
    }
    now=microsec_clock::local_time();
    diff=now-tick;	
	cout<<"use "<<diff.total_milliseconds()<<" ms"<<endl;

    tick=microsec_clock::local_time();
    for(auto &v:ret_mark){
        DBMapData tempData;
        tempData.MapMark=atoi(v[0].c_str());
        tempData.rate=0;
        for(auto &p:PerData){
            DBMapData retData;
            retData=CountFre(trace,p[0],p[1],atoi(v[0].c_str()));
            tempData.rate=tempData.rate+retData.Out+retData.Enter;
            tempData.StayTime=tempData.StayTime+retData.StayTime;
        }
        MapData.push_back(tempData);
    }
    now=microsec_clock::local_time();
    diff=now-tick;	
	cout<<"use "<<diff.total_milliseconds()<<" ms"<<endl;

    return DB_RET_OK;
}

int DBTraceAPI::DBSearchTimeTrace(ptime timeBegin,ptime timeEnd,vector<DBTrace>&Traces){
    DB.useDB(database);
    string tracetable1,tracetable2;
    table=BASE_TABLE_TRACE;
    value="TableName";
    string timeB=ptime_to_string(timeBegin);
    string timeE=ptime_to_string(timeEnd);
    //string timeB=to_iso_extended_string(timeBegin);
    //timeB=timeB.replace(timeB.find("T"),1," ");
    //string timeE=to_iso_extended_string(timeEnd);
    //timeE=timeE.replace(timeE.find("T"),1," ");
    limits="YearMonth>="+timeB.substr(0,4)+timeB.substr(5,2)+" AND YearMonth<="+timeE.substr(0,4)+timeE.substr(5,2);
    //检索在时间区间内的所有轨迹表
    string_table ret=DB.selectItem(table,value,limits);
    //轨迹表为0则返回没有数据，不为0则开始搜索
    //int rows=ret.size();
    if(ret.empty()){
        return DB_RET_NULL;
    }
    string_table temp;
    value="*";
    limits="Time>='"+timeB+"' AND Time<='"+timeE+"'";
    for(auto &v:ret){
        table=v[0];
        temp=DB.selectItem(table,value,limits);
        DBTrace trace; 
        vector<DBTrace> res;
        res=trace.readTraces(temp);
        Traces.insert(Traces.end(),res.begin(),res.end());
    }
    if(Traces.size()==0){
        return DB_RET_NULL;
    }else{
        return DB_RET_OK;
    }
}